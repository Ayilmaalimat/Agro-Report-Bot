from app.config import USER_PASSWORD, USER_LIST_ID, types, bot, dp
from app.callback import keyboard
from app import writeXlsx, service
import datetime


def auth(func):
    async def wrapper(message):
        is_present = False
        for user in USER_LIST_ID:
            if message['from']['id'] == user:
                is_present = True
        if not is_present:
            stick = open('./stickers/index.webp', 'rb')
            await bot.send_sticker(message.chat.id, stick)
            return await message.reply('–û–≥–æ-–≥–æ-–≥–æ! üò± –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', reply=False)
        return await func(message)

    return wrapper


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = keyboard.gen_markup_help()
    is_checked = service.checked_user_in_list(USER_LIST_ID, message)
    if is_checked:
        mess = '–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n' \
               '–ú—ã –≤–∞—Å –Ω–µ –∑–∞–±—ã–ª–∏, <b>{} {}</b> üòâ\n' \
               '–ö–∞–∫–æ–π –æ—Ç—á–µ—Ç —Ö–æ—Ç–µ–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?\n'.format(message.from_user.first_name, message.from_user.last_name)
        await bot.send_message(message.chat.id, mess, parse_mode='HTML', reply_markup=markup)
    else:
        mess = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{} {}!</b>\n' \
               '–Ø - <b>SF</b> –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞\n' \
               '–°—Ç–æ–π—Ç–µ! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∞ —Ç–æ –Ω–µ –ø—É—â—É üò†'.format(
            message.from_user.first_name, message.from_user.last_name)
        await bot.send_message(message.chat.id, mess, parse_mode='HTML')


@dp.message_handler(lambda message: message.text == USER_PASSWORD)
async def send_password_text(message: types.Message):
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    USER_LIST_ID.append(message.chat.id)
    markup = keyboard.gen_markup_help()
    stick = open('./stickers/index3.webp', 'rb')
    await bot.send_sticker(message.chat.id, stick)
    return await message.reply(
        '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, {} {}! ‚úä\n'
        '–ú—ã –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª–∏, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —á–µ–º —è —Å–∏–ª–µ–Ω'.format(message.from_user.first_name,
                                                                                   message.from_user.last_name),
        reply_markup=markup,
        reply=False)


@dp.message_handler(lambda message: message.text == '–ö–æ–º–∞–Ω–¥—ã')
@auth
async def send_help(message: types.Message):
    """ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    markup = keyboard.gen_markup_commands()
    await bot.send_message(
        message.chat.id,
        '–ö–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å?\n',
        reply_markup=markup
    )


@dp.message_handler(lambda message: message.text == '2. –û—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å')
@auth
async def get_yesterday_statistic(message: types.Message):
    """ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—á–µ—Ä–∞—â–Ω–∏–π –¥–µ–Ω—å"""
    stat = service.get_yesterday_statistic()
    date = datetime.date.today() - datetime.timedelta(days=1)
    writeXlsx.write_in_xlsx(date, stat)
    doc = open('./xlsx-files/statistics' + str(date) + '.xlsx', 'rb')
    await bot.send_document(message.chat.id, doc)


@dp.message_handler(lambda message: message.text == '1. –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å')
@auth
async def get_today_statistic(message: types.Message):
    """ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—â–Ω–∏–π –¥–µ–Ω—å"""
    stat = service.get_today_statistic()
    date = datetime.datetime.now().date()
    writeXlsx.write_in_xlsx(date, stat)
    doc = open('./xlsx-files/statistics' + str(date) + '.xlsx', 'rb')
    await bot.send_document(message.chat.id, doc)
